// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.0
// source: proto/story.proto

package story

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	StoryService_SayHello_FullMethodName       = "/story.StoryService/SayHello"
	StoryService_DropCollection_FullMethodName = "/story.StoryService/DropCollection"
	StoryService_CreateComment_FullMethodName  = "/story.StoryService/CreateComment"
	StoryService_CreateStory_FullMethodName    = "/story.StoryService/CreateStory"
	StoryService_DeleteComment_FullMethodName  = "/story.StoryService/DeleteComment"
	StoryService_DeleteStory_FullMethodName    = "/story.StoryService/DeleteStory"
	StoryService_GetOneStory_FullMethodName    = "/story.StoryService/GetOneStory"
	StoryService_GetRecommended_FullMethodName = "/story.StoryService/GetRecommended"
)

// StoryServiceClient is the client API for StoryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StoryServiceClient interface {
	// Test functions
	SayHello(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*HelloReply, error)
	DropCollection(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
	// Create functions
	CreateComment(ctx context.Context, in *CreateCommentRequest, opts ...grpc.CallOption) (*CreateCommentResponse, error)
	CreateStory(ctx context.Context, in *CreateStoryRequest, opts ...grpc.CallOption) (*CreateStoryResponse, error)
	// Delete functions
	DeleteComment(ctx context.Context, in *DeleteCommentRequest, opts ...grpc.CallOption) (*DeleteCommentResponse, error)
	DeleteStory(ctx context.Context, in *DeleteStoryRequest, opts ...grpc.CallOption) (*DeleteStoryResponse, error)
	// Get functions
	GetOneStory(ctx context.Context, in *GetOneStoryRequest, opts ...grpc.CallOption) (*GetOneStoryResponse, error)
	GetRecommended(ctx context.Context, in *GetRecommendedRequest, opts ...grpc.CallOption) (*GetRecommendedResponse, error)
}

type storyServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewStoryServiceClient(cc grpc.ClientConnInterface) StoryServiceClient {
	return &storyServiceClient{cc}
}

func (c *storyServiceClient) SayHello(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*HelloReply, error) {
	out := new(HelloReply)
	err := c.cc.Invoke(ctx, StoryService_SayHello_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storyServiceClient) DropCollection(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, StoryService_DropCollection_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storyServiceClient) CreateComment(ctx context.Context, in *CreateCommentRequest, opts ...grpc.CallOption) (*CreateCommentResponse, error) {
	out := new(CreateCommentResponse)
	err := c.cc.Invoke(ctx, StoryService_CreateComment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storyServiceClient) CreateStory(ctx context.Context, in *CreateStoryRequest, opts ...grpc.CallOption) (*CreateStoryResponse, error) {
	out := new(CreateStoryResponse)
	err := c.cc.Invoke(ctx, StoryService_CreateStory_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storyServiceClient) DeleteComment(ctx context.Context, in *DeleteCommentRequest, opts ...grpc.CallOption) (*DeleteCommentResponse, error) {
	out := new(DeleteCommentResponse)
	err := c.cc.Invoke(ctx, StoryService_DeleteComment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storyServiceClient) DeleteStory(ctx context.Context, in *DeleteStoryRequest, opts ...grpc.CallOption) (*DeleteStoryResponse, error) {
	out := new(DeleteStoryResponse)
	err := c.cc.Invoke(ctx, StoryService_DeleteStory_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storyServiceClient) GetOneStory(ctx context.Context, in *GetOneStoryRequest, opts ...grpc.CallOption) (*GetOneStoryResponse, error) {
	out := new(GetOneStoryResponse)
	err := c.cc.Invoke(ctx, StoryService_GetOneStory_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storyServiceClient) GetRecommended(ctx context.Context, in *GetRecommendedRequest, opts ...grpc.CallOption) (*GetRecommendedResponse, error) {
	out := new(GetRecommendedResponse)
	err := c.cc.Invoke(ctx, StoryService_GetRecommended_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StoryServiceServer is the server API for StoryService service.
// All implementations must embed UnimplementedStoryServiceServer
// for forward compatibility
type StoryServiceServer interface {
	// Test functions
	SayHello(context.Context, *Empty) (*HelloReply, error)
	DropCollection(context.Context, *Empty) (*Empty, error)
	// Create functions
	CreateComment(context.Context, *CreateCommentRequest) (*CreateCommentResponse, error)
	CreateStory(context.Context, *CreateStoryRequest) (*CreateStoryResponse, error)
	// Delete functions
	DeleteComment(context.Context, *DeleteCommentRequest) (*DeleteCommentResponse, error)
	DeleteStory(context.Context, *DeleteStoryRequest) (*DeleteStoryResponse, error)
	// Get functions
	GetOneStory(context.Context, *GetOneStoryRequest) (*GetOneStoryResponse, error)
	GetRecommended(context.Context, *GetRecommendedRequest) (*GetRecommendedResponse, error)
	mustEmbedUnimplementedStoryServiceServer()
}

// UnimplementedStoryServiceServer must be embedded to have forward compatible implementations.
type UnimplementedStoryServiceServer struct {
}

func (UnimplementedStoryServiceServer) SayHello(context.Context, *Empty) (*HelloReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SayHello not implemented")
}
func (UnimplementedStoryServiceServer) DropCollection(context.Context, *Empty) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DropCollection not implemented")
}
func (UnimplementedStoryServiceServer) CreateComment(context.Context, *CreateCommentRequest) (*CreateCommentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateComment not implemented")
}
func (UnimplementedStoryServiceServer) CreateStory(context.Context, *CreateStoryRequest) (*CreateStoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateStory not implemented")
}
func (UnimplementedStoryServiceServer) DeleteComment(context.Context, *DeleteCommentRequest) (*DeleteCommentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteComment not implemented")
}
func (UnimplementedStoryServiceServer) DeleteStory(context.Context, *DeleteStoryRequest) (*DeleteStoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteStory not implemented")
}
func (UnimplementedStoryServiceServer) GetOneStory(context.Context, *GetOneStoryRequest) (*GetOneStoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOneStory not implemented")
}
func (UnimplementedStoryServiceServer) GetRecommended(context.Context, *GetRecommendedRequest) (*GetRecommendedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRecommended not implemented")
}
func (UnimplementedStoryServiceServer) mustEmbedUnimplementedStoryServiceServer() {}

// UnsafeStoryServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StoryServiceServer will
// result in compilation errors.
type UnsafeStoryServiceServer interface {
	mustEmbedUnimplementedStoryServiceServer()
}

func RegisterStoryServiceServer(s grpc.ServiceRegistrar, srv StoryServiceServer) {
	s.RegisterService(&StoryService_ServiceDesc, srv)
}

func _StoryService_SayHello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoryServiceServer).SayHello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StoryService_SayHello_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoryServiceServer).SayHello(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _StoryService_DropCollection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoryServiceServer).DropCollection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StoryService_DropCollection_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoryServiceServer).DropCollection(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _StoryService_CreateComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCommentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoryServiceServer).CreateComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StoryService_CreateComment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoryServiceServer).CreateComment(ctx, req.(*CreateCommentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StoryService_CreateStory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateStoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoryServiceServer).CreateStory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StoryService_CreateStory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoryServiceServer).CreateStory(ctx, req.(*CreateStoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StoryService_DeleteComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCommentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoryServiceServer).DeleteComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StoryService_DeleteComment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoryServiceServer).DeleteComment(ctx, req.(*DeleteCommentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StoryService_DeleteStory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteStoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoryServiceServer).DeleteStory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StoryService_DeleteStory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoryServiceServer).DeleteStory(ctx, req.(*DeleteStoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StoryService_GetOneStory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOneStoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoryServiceServer).GetOneStory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StoryService_GetOneStory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoryServiceServer).GetOneStory(ctx, req.(*GetOneStoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StoryService_GetRecommended_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRecommendedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoryServiceServer).GetRecommended(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StoryService_GetRecommended_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoryServiceServer).GetRecommended(ctx, req.(*GetRecommendedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// StoryService_ServiceDesc is the grpc.ServiceDesc for StoryService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StoryService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "story.StoryService",
	HandlerType: (*StoryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SayHello",
			Handler:    _StoryService_SayHello_Handler,
		},
		{
			MethodName: "DropCollection",
			Handler:    _StoryService_DropCollection_Handler,
		},
		{
			MethodName: "CreateComment",
			Handler:    _StoryService_CreateComment_Handler,
		},
		{
			MethodName: "CreateStory",
			Handler:    _StoryService_CreateStory_Handler,
		},
		{
			MethodName: "DeleteComment",
			Handler:    _StoryService_DeleteComment_Handler,
		},
		{
			MethodName: "DeleteStory",
			Handler:    _StoryService_DeleteStory_Handler,
		},
		{
			MethodName: "GetOneStory",
			Handler:    _StoryService_GetOneStory_Handler,
		},
		{
			MethodName: "GetRecommended",
			Handler:    _StoryService_GetRecommended_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/story.proto",
}
